/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/capitalleagues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List capital leagues
         * @description List capital leagues
         */
        get: operations["getCapitalLeagues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/capitalleagues/{leagueId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get capital league information
         * @description Get capital league information
         */
        get: operations["getCapitalLeague"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/locations/{locationId}/rankings/capitals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get capital rankings for a specific location
         * @description Get capital rankings for a specific location
         */
        get: operations["getClanCapitalRanking"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clans/{clanTag}/currentwar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve information about clan's current clan war
         * @description Retrieve information about clan's current clan war
         */
        get: operations["getCurrentWar"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clans/{clanTag}/currentwar/leaguegroup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve information about clan's current clan war league group
         * @description Retrieve information about clan's current clan war league group
         */
        get: operations["getClanWarLeagueGroup"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clans/{clanTag}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get clan information
         * @description Get information about a single clan by clan tag. Clan tags can be found using clan search operation. Note that clan tags start with hash character '#' and that needs to be URL-encoded properly to work in URL, so for example clan tag '#2ABC' would become '%232ABC' in the URL.
         */
        get: operations["getClan"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clans/{clanTag}/capitalraidseasons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve clan's capital raid seasons
         * @description Retrieve clan's capital raid seasons
         */
        get: operations["getCapitalRaidSeasons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/players/{playerTag}/verifytoken": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify player API token that can be found from the game settings.
         * @description Verify player API token that can be found from the game settings. This API call can be used to check that players own the game accounts they claim to own as they need to provide the one-time use API token that exists inside the game.
         */
        post: operations["verifyToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/players/{playerTag}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get player information
         * @description Get information about a single player by player tag. Player tags can be found either in game or by from clan member lists. Note that player tags start with hash character '#' and that needs to be URL-encoded properly to work in URL, so for example player tag '#2ABC' would become '%232ABC' in the URL.
         */
        get: operations["getPlayer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/builderbaseleagues/{leagueId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Builder Base league information
         * @description Get Builder Base league information
         */
        get: operations["getBuilderBaseLeague"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/locations/{locationId}/rankings/players-builder-base": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get player Builder Base rankings for a specific location
         * @description Get player Builder Base rankings for a specific location
         */
        get: operations["getPlayerBuilderBaseRanking"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/locations/{locationId}/rankings/clans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get clan rankings for a specific location
         * @description Get clan rankings for a specific location
         */
        get: operations["getClanRanking"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clanwarleagues/wars/{warTag}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve information about individual clan war league war
         * @description Retrieve information about individual clan war league war
         */
        get: operations["getClanWarLeagueWar"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/builderbaseleagues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Builder Base leagues
         * @description List Builder Base leagues
         */
        get: operations["getBuilderBaseLeagues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/leagues/{leagueId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get league information
         * @description Get league information
         */
        get: operations["getLeague"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goldpass/seasons/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get information about the current gold pass season.
         * @description Get information about the current gold pass season.
         */
        get: operations["getCurrentGoldPassSeason"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clans/{clanTag}/warlog": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve clan's clan war log
         * @description Retrieve clan's clan war log
         */
        get: operations["getClanWarLog"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/leagues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List leagues
         * @description List leagues
         */
        get: operations["getLeagues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/leagues/{leagueId}/seasons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get league seasons
         * @description Get league seasons. Note that league season information is available only for Legend League.
         */
        get: operations["getLeagueSeasons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/locations/{locationId}/rankings/players": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get player rankings for a specific location
         * @description Get player rankings for a specific location
         */
        get: operations["getPlayerRanking"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clans/{clanTag}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List clan members
         * @description List clan members.
         */
        get: operations["getClanMembers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List locations
         * @description List locations
         */
        get: operations["getLocations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/labels/players": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List player labels
         * @description List player labels
         */
        get: operations["getPlayerLabels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warleagues/{leagueId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get war league information
         * @description Get war league information
         */
        get: operations["getWarLeague"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/leagues/{leagueId}/seasons/{seasonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get league season rankings
         * @description Get league season rankings. Note that league season information is available only for Legend League.
         */
        get: operations["getLeagueSeasonRankings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/locations/{locationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get location information
         * @description Get information about specific location
         */
        get: operations["getLocation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/locations/{locationId}/rankings/clans-builder-base": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get clan Builder Base rankings for a specific location
         * @description Get clan Builder Base rankings for a specific location
         */
        get: operations["getClanBuilderBaseRanking"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/labels/clans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List clan labels
         * @description List clan labels
         */
        get: operations["getClanLabels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search clans
         * @description Search all clans by name and/or filtering the results using various criteria. At least one filtering criteria must be defined and if name is used as part of search, it is required to be at least three characters long. It is not possible to specify ordering for results so clients should not rely on any specific ordering as that may change in the future releases of the API.
         */
        get: operations["searchClans"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warleagues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List war leagues
         * @description List war leagues
         */
        get: operations["getWarLeagues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login to the developer portal. */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apikey/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** List all tokens. */
        post: operations["keys"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apikey/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Revoke an api token. */
        post: operations["revoke"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apikey/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an api token. */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BadgeUrls: {
            readonly small: string;
            readonly medium: string;
            readonly large: string;
        };
        /** @enum {string} */
        GroupState: "preparation" | "inWar" | "ended";
        IconUrls: {
            readonly small?: string;
            readonly medium?: string;
            readonly tiny?: string;
        };
        /** @enum {string} */
        RecruitingType: "inviteOnly" | "closed" | "open";
        /** @enum {string} */
        Role: "member" | "admin" | "coLeader" | "leader";
        /** @enum {string} */
        Result: "lose" | "tie" | "win";
        /** @enum {string} */
        VillageType: "home" | "builderBase" | "clanCapital";
        /** @enum {string} */
        WarFrequency: "unknown" | "never" | "lessThanOncePerWeek" | "oncePerWeek" | "moreThanOncePerWeek" | "always" | "any";
        /** @enum {string} */
        WarPreference: "out" | "in";
        /** @enum {string} */
        WarState: "notInWar" | "preparation" | "inWar" | "warEnded";
        /** @enum {string} */
        WarType: "unknown" | "random" | "friendly" | "sccwl";
        WarLeagueList: {
            readonly items: components["schemas"]["WarLeague"][];
        };
        WarLeague: {
            readonly name: components["schemas"]["JsonLocalizedName"];
            readonly id: number;
        };
        JsonLocalizedName: string;
        ClanList: {
            readonly items: components["schemas"]["ClanListEntry"][];
        };
        ClanListEntry: {
            readonly warLeague: components["schemas"]["WarLeague"];
            readonly requiredTrophies: number;
            readonly clanBuilderBasePoints: number;
            readonly tag: string;
            readonly isWarLogPublic: boolean;
            readonly warFrequency?: components["schemas"]["WarFrequency"];
            readonly clanLevel: number;
            readonly warWinStreak: number;
            readonly warWins: number;
            readonly warTies?: number;
            readonly warLosses?: number;
            readonly clanPoints: number;
            readonly chatLanguage?: components["schemas"]["Language"];
            readonly labels: components["schemas"]["LabelList"];
            readonly name: string;
            readonly location?: components["schemas"]["Location"];
            readonly type?: components["schemas"]["RecruitingType"];
            readonly members: number;
            readonly badgeUrls: components["schemas"]["BadgeUrls"];
        };
        Clan: {
            readonly warLeague: components["schemas"]["WarLeague"];
            readonly memberList: components["schemas"]["ClanMemberList"];
            readonly requiredTrophies: number;
            readonly requiredBuilderBaseTrophies: number;
            readonly clanBuilderBasePoints: number;
            readonly tag: string;
            readonly isWarLogPublic: boolean;
            readonly warFrequency?: components["schemas"]["WarFrequency"];
            readonly clanLevel: number;
            readonly warWinStreak: number;
            readonly warWins: number;
            readonly warTies?: number;
            readonly warLosses?: number;
            readonly clanPoints: number;
            readonly chatLanguage?: components["schemas"]["Language"];
            readonly labels: components["schemas"]["LabelList"];
            readonly name: string;
            readonly location?: components["schemas"]["Location"];
            readonly type?: components["schemas"]["RecruitingType"];
            readonly members: number;
            readonly description: string;
            readonly clanCapital: components["schemas"]["ClanCapital"];
            readonly badgeUrls: components["schemas"]["BadgeUrls"];
            readonly capitalLeague: components["schemas"]["CapitalLeague"];
            readonly isFamilyFriendly: boolean;
        };
        CapitalLeague: {
            readonly name: components["schemas"]["JsonLocalizedName"];
            readonly id: number;
        };
        CapitalLeagueObject: {
            readonly items: components["schemas"]["CapitalLeague"][];
        };
        ClanCapital: {
            readonly capitalHallLevel?: number;
            readonly districts?: components["schemas"]["ClanDistrictDataList"];
        };
        ClanCapitalRaidSeasons: {
            readonly items: components["schemas"]["ClanCapitalRaidSeason"][];
        };
        ClanCapitalRaidSeason: {
            readonly attackLog: components["schemas"]["ClanCapitalRaidSeasonAttackLogList"];
            readonly defenseLog: components["schemas"]["ClanCapitalRaidSeasonDefenseLogList"];
            /** @enum {string} */
            readonly state: "unknown" | "ongoing" | "ended";
            /** Format: date-time */
            readonly startTime: string;
            /** Format: date-time */
            readonly endTime: string;
            readonly capitalTotalLoot: number;
            readonly raidsCompleted: number;
            readonly totalAttacks: number;
            readonly enemyDistrictsDestroyed: number;
            readonly offensiveReward: number;
            readonly defensiveReward: number;
            readonly members?: components["schemas"]["ClanCapitalRaidSeasonMemberList"];
        };
        ClanCapitalRaidSeasonMemberList: components["schemas"]["ClanCapitalRaidSeasonMember"][];
        ClanCapitalRaidSeasonMember: {
            readonly tag: string;
            readonly name: string;
            readonly attacks: number;
            readonly attackLimit: number;
            readonly bonusAttackLimit: number;
            readonly capitalResourcesLooted: number;
        };
        ClanCapitalRaidSeasonDefenseLogList: components["schemas"]["ClanCapitalRaidSeasonDefenseLogEntry"][];
        ClanCapitalRaidSeasonDefenseLogEntry: {
            readonly attacker: components["schemas"]["ClanCapitalRaidSeasonClanInfo"];
            readonly attackCount: number;
            readonly districtCount: number;
            readonly districtsDestroyed: number;
            readonly districts: components["schemas"]["ClanCapitalRaidSeasonDistrictList"];
        };
        ClanCapitalRaidSeasonDistrictList: components["schemas"]["ClanCapitalRaidSeasonDistrict"][];
        ClanCapitalRaidSeasonDistrict: {
            readonly stars: number;
            readonly name: components["schemas"]["JsonLocalizedName"];
            readonly id: number;
            readonly destructionPercent: number;
            readonly attackCount: number;
            readonly totalLooted: number;
            readonly attacks?: components["schemas"]["ClanCapitalRaidSeasonAttackList"];
            readonly districtHallLevel: number;
        };
        ClanCapitalRaidSeasonAttackList: components["schemas"]["ClanCapitalRaidSeasonAttack"][];
        ClanCapitalRankingObject: {
            readonly items: components["schemas"]["ClanCapitalRankingList"];
        };
        ClanCapitalRankingList: components["schemas"]["ClanCapitalRanking"][];
        ClanCapitalRanking: {
            readonly clanCapitalPoints: number;
            readonly tag: string;
            readonly name: string;
            readonly location?: components["schemas"]["Location"];
            readonly badgeUrls: components["schemas"]["BadgeUrls"];
            readonly clanLevel: number;
            readonly members: number;
            readonly rank: number;
            readonly previousRank: number;
        };
        ClanCapitalRaidSeasonAttack: {
            readonly attacker: components["schemas"]["ClanCapitalRaidSeasonAttacker"];
            readonly destructionPercent: number;
            readonly stars: number;
        };
        ClanCapitalRaidSeasonAttacker: {
            readonly tag: string;
            readonly name: string;
        };
        ClanCapitalRaidSeasonClanInfo: {
            readonly tag: string;
            readonly name: string;
            readonly level: number;
            readonly badgeUrls: components["schemas"]["BadgeUrls"];
        };
        ClanCapitalRaidSeasonAttackLogList: components["schemas"]["ClanCapitalRaidSeasonAttackLogEntry"][];
        ClanCapitalRaidSeasonAttackLogEntry: {
            readonly defender: components["schemas"]["ClanCapitalRaidSeasonClanInfo"];
            readonly attackCount: number;
            readonly districtCount: number;
            readonly districtsDestroyed: number;
            readonly districts: components["schemas"]["ClanCapitalRaidSeasonDistrictList"];
        };
        ClanDistrictDataList: components["schemas"]["ClanDistrictData"][];
        ClanDistrictData: {
            readonly name: components["schemas"]["JsonLocalizedName"];
            readonly id: number;
            readonly districtHallLevel: number;
        };
        Language: {
            readonly name: string;
            readonly id: number;
            readonly languageCode: string;
        };
        Location: {
            readonly localizedName?: string;
            readonly id: number;
            readonly name: string;
            readonly isCountry: boolean;
            readonly countryCode?: string;
        };
        LabelsObject: {
            readonly items: components["schemas"]["Label"][];
        };
        LabelList: components["schemas"]["Label"][];
        Label: {
            readonly name: components["schemas"]["JsonLocalizedName"];
            readonly id: number;
            readonly iconUrls: components["schemas"]["IconUrls"];
        };
        ClanMemberList: components["schemas"]["ClanMember"][];
        ClanMember: {
            readonly league: components["schemas"]["League"];
            readonly builderBaseLeague?: components["schemas"]["BuilderBaseLeague"];
            readonly tag: string;
            readonly name: string;
            readonly role?: components["schemas"]["Role"];
            readonly expLevel: number;
            readonly clanRank: number;
            readonly previousClanRank: number;
            readonly donations: number;
            readonly donationsReceived: number;
            readonly trophies: number;
            readonly builderBaseTrophies: number;
            readonly playerHouse?: components["schemas"]["PlayerHouse"];
            readonly townHallLevel?: number;
        };
        PlayerHouse: {
            readonly elements: components["schemas"]["PlayerHouseElementList"];
        };
        PlayerHouseElementList: components["schemas"]["PlayerHouseElement"][];
        PlayerHouseElement: {
            readonly id: number;
            /** @enum {string} */
            readonly type: "unknown" | "ground" | "roof" | "foot" | "decoration" | "walls";
        };
        BuilderBaseLeague: {
            readonly name: components["schemas"]["JsonLocalizedName"];
            readonly id: number;
        };
        League: {
            readonly name: components["schemas"]["JsonLocalizedName"];
            readonly id: number;
            readonly iconUrls: components["schemas"]["IconUrls"];
        };
        ClanBuilderBaseRankingList: {
            readonly items: components["schemas"]["ClanBuilderBaseRanking"][];
        };
        ClanBuilderBaseRanking: {
            readonly clanBuilderBasePoints: number;
        };
        PlayerRankingList: {
            readonly items: components["schemas"]["PlayerRanking"][];
        };
        PlayerRanking: {
            readonly clan?: components["schemas"]["PlayerRankingClan"];
            readonly league: components["schemas"]["League"];
            readonly attackWins: number;
            readonly defenseWins: number;
            readonly tag: string;
            readonly name: string;
            readonly expLevel: number;
            readonly rank: number;
            readonly previousRank: number;
            readonly trophies: number;
        };
        PlayerRankingClan: {
            readonly tag: string;
            readonly name: string;
            readonly badgeUrls: components["schemas"]["BadgeUrls"];
        };
        LocationList: {
            readonly items: components["schemas"]["Location"][];
        };
        LeagueSeasonList: {
            readonly items: components["schemas"]["LeagueSeason"][];
        };
        LeagueSeason: {
            readonly id: string;
        };
        LeagueList: {
            readonly items: components["schemas"]["League"][];
        };
        ClanWarLog: {
            readonly items: components["schemas"]["ClanWarLogEntry"][];
        };
        ClanWarLogEntry: {
            readonly clan: components["schemas"]["WarClanLogEntry"];
            readonly teamSize: number;
            readonly attacksPerMember?: number;
            readonly opponent: components["schemas"]["WarClanLogEntry"];
            /** Format: date-time */
            readonly endTime: string;
            readonly result?: components["schemas"]["Result"];
        };
        GoldPassSeason: {
            readonly startTime: string;
            readonly endTime: string;
        };
        WarClanLogEntry: {
            /** Format: float */
            readonly destructionPercentage: number;
            readonly tag?: string;
            readonly name?: string;
            readonly badgeUrls: components["schemas"]["BadgeUrls"];
            readonly clanLevel: number;
            readonly attacks?: number;
            readonly stars: number;
            readonly expEarned?: number;
        };
        WarClan: {
            /** Format: float */
            readonly destructionPercentage: number;
            readonly tag: string;
            readonly name: string;
            readonly badgeUrls: components["schemas"]["BadgeUrls"];
            readonly clanLevel: number;
            readonly attacks: number;
            readonly stars: number;
            readonly expEarned?: number;
            readonly members: components["schemas"]["ClanWarMemberList"];
        };
        ClanWarMemberList: components["schemas"]["ClanWarMember"][];
        ClanWarMember: {
            readonly tag: string;
            readonly name: string;
            readonly mapPosition: number;
            readonly townhallLevel: number;
            readonly opponentAttacks: number;
            readonly bestOpponentAttack?: components["schemas"]["ClanWarAttack"];
            readonly attacks?: components["schemas"]["ClanWarAttackList"];
        };
        ClanWarAttackList: components["schemas"]["ClanWarAttack"][];
        ClanWarAttack: {
            readonly order: number;
            readonly attackerTag: string;
            readonly defenderTag: string;
            readonly stars: number;
            /** Format: float */
            readonly destructionPercentage: number;
            readonly duration?: number;
        };
        ClanWarLeagueGroup: {
            readonly state?: components["schemas"]["GroupState"];
            /**
             * Format: date
             * @example 2023-01
             */
            readonly season: string;
            readonly clans: components["schemas"]["ClanWarLeagueClanList"];
            readonly rounds: components["schemas"]["ClanWarLeagueRoundList"];
        };
        ClanWarLeagueRoundList: components["schemas"]["ClanWarLeagueRound"][];
        ClanWarLeagueRound: {
            readonly warTags: components["schemas"]["StringList"];
        };
        StringList: string[];
        String: Record<string, never>;
        ClanWarLeagueClanList: components["schemas"]["ClanWarLeagueClan"][];
        ClanWarLeagueClan: {
            readonly tag: string;
            readonly clanLevel: number;
            readonly name: string;
            readonly members: components["schemas"]["ClanWarLeagueClanMember"][];
            readonly badgeUrls: components["schemas"]["BadgeUrls"];
        };
        ClanWarLeagueClanMember: {
            readonly tag: string;
            readonly townHallLevel: number;
            readonly name: string;
        };
        ClanRankingList: {
            readonly items: components["schemas"]["ClanRanking"][];
        };
        ClanRanking: {
            readonly clanLevel: number;
            readonly clanPoints: number;
            readonly location?: components["schemas"]["Location"];
            readonly members: number;
            readonly tag: string;
            readonly name: string;
            readonly rank: number;
            readonly previousRank: number;
            readonly badgeUrls: components["schemas"]["BadgeUrls"];
        };
        BuilderBaseLeagueList: {
            readonly items: components["schemas"]["BuilderBaseLeague"][];
        };
        PlayerBuilderBaseRankingList: {
            readonly items: components["schemas"]["PlayerBuilderBaseRanking"][];
        };
        PlayerBuilderBaseRanking: {
            readonly builderBaseLeague: components["schemas"]["BuilderBaseLeague"];
            readonly clan?: components["schemas"]["PlayerRankingClan"];
            readonly tag: string;
            readonly name: string;
            readonly expLevel: number;
            readonly rank: number;
            readonly previousRank: number;
            readonly builderBaseTrophies: number;
        };
        Player: {
            readonly clan?: components["schemas"]["PlayerClan"];
            readonly league?: components["schemas"]["League"];
            readonly builderBaseLeague?: components["schemas"]["BuilderBaseLeague"];
            readonly role?: components["schemas"]["Role"];
            readonly warPreference?: components["schemas"]["WarPreference"];
            readonly attackWins: number;
            readonly defenseWins: number;
            readonly townHallLevel: number;
            readonly townHallWeaponLevel?: number;
            readonly legendStatistics?: components["schemas"]["PlayerLegendStatistics"];
            readonly troops: components["schemas"]["PlayerItemLevelList"];
            readonly heroes: components["schemas"]["PlayerItemLevelList"];
            readonly heroEquipment?: components["schemas"]["PlayerItemLevelList"];
            readonly spells: components["schemas"]["PlayerItemLevelList"];
            readonly labels: components["schemas"]["LabelList"];
            readonly tag: string;
            readonly name: string;
            readonly expLevel: number;
            readonly trophies: number;
            readonly bestTrophies: number;
            readonly donations: number;
            readonly donationsReceived: number;
            readonly builderHallLevel?: number;
            readonly builderBaseTrophies: number;
            readonly warStars: number;
            readonly achievements: components["schemas"]["PlayerAchievementProgressList"];
            readonly clanCapitalContributions?: number;
            readonly playerHouse?: components["schemas"]["PlayerHouse"];
        };
        PlayerAchievementProgressList: components["schemas"]["PlayerAchievementProgress"][];
        PlayerAchievementProgress: {
            readonly stars: number;
            readonly value: number;
            readonly name: components["schemas"]["JsonLocalizedName"];
            readonly target: number;
            readonly info: components["schemas"]["JsonLocalizedName"];
            readonly completionInfo: components["schemas"]["JsonLocalizedName"] | null;
            readonly village: string & components["schemas"]["VillageType"];
        };
        PlayerItemLevelList: components["schemas"]["PlayerItemLevel"][];
        PlayerItemLevel: {
            readonly level: number;
            readonly name: components["schemas"]["JsonLocalizedName"];
            readonly maxLevel: number;
            readonly village: string & components["schemas"]["VillageType"];
            readonly superTroopIsActive?: boolean;
            equipment?: components["schemas"]["PlayerItemLevelList"];
        };
        PlayerLegendStatistics: {
            readonly currentSeason: components["schemas"]["LegendLeagueTournamentSeasonResult"];
            readonly previousBuilderBaseSeason?: components["schemas"]["LegendLeagueTournamentSeasonResult"];
            readonly bestBuilderBaseSeason?: components["schemas"]["LegendLeagueTournamentSeasonResult"];
            readonly legendTrophies: number;
            readonly previousSeason?: components["schemas"]["LegendLeagueTournamentSeasonResult"];
            readonly bestSeason?: components["schemas"]["LegendLeagueTournamentSeasonResult"];
        };
        LegendLeagueTournamentSeasonResult: {
            readonly trophies: number;
            /**
             * Format: date
             * @example 2023-01
             */
            readonly id?: string;
            readonly rank?: number;
        };
        PlayerClan: {
            readonly tag: string;
            readonly clanLevel: number;
            readonly name: string;
            readonly badgeUrls: components["schemas"]["BadgeUrls"];
        };
        VerifyTokenRequest: {
            token: string;
        };
        VerifyTokenResponse: {
            readonly tag: string;
            readonly token: string;
            readonly status: string;
        };
        LoginCredentials: {
            email: string;
            password: string;
        };
        LoginResponse: {
            temporaryAPIToken: string;
            sessionExpiresInSeconds: number;
        };
        KeyList: {
            status: {
                code: number;
                message: string;
                detail?: string;
            };
            sessionExpiresInSeconds: number;
            keys: components["schemas"]["Key"][];
        };
        KeyInstance: {
            status: {
                code?: number;
                message?: string;
                detail?: string | null;
            };
            sessionExpiresInSeconds: number;
            key?: components["schemas"]["Key"];
        };
        Key: {
            id: string;
            name: string;
            key: string;
            developerId: string;
            tier: string;
            description: string;
            origins?: string | null;
            scopes: string[];
            /** Format: date-time */
            validUntil?: string | null;
            cidrRanges: string[];
        };
        CreateTokenRequest: {
            cidrRanges: string[];
            name: string;
            description: string;
        };
        ClanWar: {
            readonly clan: components["schemas"]["WarClan"];
            readonly teamSize: number;
            readonly attacksPerMember: number;
            readonly opponent: components["schemas"]["WarClan"];
            /** Format: date-time */
            readonly startTime: string;
            readonly state?: components["schemas"]["WarState"];
            /** Format: date-time */
            readonly endTime: string;
            /** Format: date-time */
            readonly preparationStartTime: string;
        };
        ClientError: {
            readonly reason: string;
            readonly message?: string;
            readonly type?: string;
            readonly detail?: Record<string, never>;
        };
    };
    responses: {
        /** @description Client provided incorrect parameters for the request. */
        BadRequestSpec: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ClientError"];
            };
        };
        /** @description Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource. */
        ForbiddenSpec: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ClientError"];
            };
        };
        /** @description Service is temprorarily unavailable because of maintenance. */
        InMaintenanceSpec: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ClientError"];
            };
        };
        /** @description Resource was not found. */
        NotFoundSpec: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ClientError"];
            };
        };
        /** @description Request was throttled, because amount of requests was above the threshold defined for the used API token. */
        RequestThrottledSpec: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ClientError"];
            };
        };
        /** @description Unknown error happened when handling the request. */
        UnknownExceptionSpec: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ClientError"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getCapitalLeagues: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CapitalLeagueObject"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getCapitalLeague: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the league. */
                leagueId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CapitalLeague"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getClanCapitalRanking: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the location to retrieve. */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClanCapitalRankingObject"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getCurrentWar: {
        parameters: {
            query?: {
                /** @description Used to bypass cache. Only SuperCell approved users may use this option. */
                realtime?: boolean;
            };
            header?: never;
            path: {
                /** @description Tag of the clan. */
                clanTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClanWar"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getClanWarLeagueGroup: {
        parameters: {
            query?: {
                /** @description Used to bypass cache. Only SuperCell approved users may use this option. */
                realtime?: boolean;
            };
            header?: never;
            path: {
                /** @description Tag of the clan. */
                clanTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClanWarLeagueGroup"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getClan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag of the clan. */
                clanTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Clan"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getCapitalRaidSeasons: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Tag of the clan. */
                clanTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClanCapitalRaidSeasons"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    verifyToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag of the player. */
                playerTag: string;
            };
            cookie?: never;
        };
        /** @description Request body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyTokenRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerifyTokenResponse"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getPlayer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag of the player. */
                playerTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Player"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getBuilderBaseLeague: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the league. */
                leagueId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuilderBaseLeague"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getPlayerBuilderBaseRanking: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the location to retrieve. */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerBuilderBaseRankingList"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getClanRanking: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the location to retrieve. */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClanRankingList"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getClanWarLeagueWar: {
        parameters: {
            query?: {
                /** @description Used to bypass cache. Only SuperCell approved users may use this option. */
                realtime?: boolean;
            };
            header?: never;
            path: {
                /** @description Tag of the war. */
                warTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClanWar"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getBuilderBaseLeagues: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuilderBaseLeagueList"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getLeague: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the league. */
                leagueId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["League"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getCurrentGoldPassSeason: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoldPassSeason"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getClanWarLog: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Tag of the clan. */
                clanTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClanWarLog"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getLeagues: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LeagueList"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getLeagueSeasons: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the league. */
                leagueId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LeagueSeasonList"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getPlayerRanking: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the location to retrieve. */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerRankingList"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getClanMembers: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Tag of the clan. */
                clanTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClanMemberList"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getLocations: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LocationList"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getPlayerLabels: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LabelsObject"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getWarLeague: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the league. */
                leagueId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarLeague"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getLeagueSeasonRankings: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the league. */
                leagueId: string;
                /** @description Identifier of the season. */
                seasonId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerRankingList"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getLocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the location to retrieve. */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Location"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getClanBuilderBaseRanking: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the location to retrieve. */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClanBuilderBaseRankingList"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getClanLabels: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LabelsObject"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    searchClans: {
        parameters: {
            query?: {
                /** @description Search clans by name. If name is used as part of search query, it needs to be at least three characters long. Name search parameter is interpreted as wild card search, so it may appear anywhere in the clan name. */
                name?: string;
                /** @description Filter by clan war frequency */
                warFrequency?: string;
                /** @description Filter by clan location identifier. For list of available locations, refer to getLocations operation. */
                locationId?: number;
                /** @description Filter by minimum number of clan members */
                minMembers?: number;
                /** @description Filter by maximum number of clan members */
                maxMembers?: number;
                /** @description Filter by minimum amount of clan points. */
                minClanPoints?: number;
                /** @description Filter by minimum clan level. */
                minClanLevel?: number;
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
                /** @description Comma separatered list of label IDs to use for filtering results. */
                labelIds?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClanList"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    getWarLeagues: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit?: number;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                after?: string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. */
                before?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarLeagueList"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginCredentials"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    keys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KeyList"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    revoke: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KeyInstance"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTokenRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KeyInstance"];
                };
            };
            400: components["responses"]["BadRequestSpec"];
            403: components["responses"]["ForbiddenSpec"];
            404: components["responses"]["NotFoundSpec"];
            429: components["responses"]["RequestThrottledSpec"];
            500: components["responses"]["UnknownExceptionSpec"];
            503: components["responses"]["InMaintenanceSpec"];
        };
    };
}
