CREATE TYPE "public"."app_permission" AS ENUM('read.all', 'write.all', 'read.cwl_applications', 'write.cwl_applications', 'read.join_applications', 'write.join_applications', 'read.rules', 'write.rules', 'read.settings', 'write.settings', 'read.users', 'write.users', 'read.clans', 'write.clans', 'read.bases', 'write.bases', 'read.coc_accounts', 'write.coc_accounts');
--> statement-breakpoint

CREATE TYPE "public"."app_role" AS ENUM('admin', 'cwl_manager', 'join_manager', 'clan_manager', 'user_manager', 'rule_manager', 'setting_manager', 'base_manager', 'coc_account_manager');
--> statement-breakpoint

CREATE TYPE "public"."join_status" AS ENUM('accepted', 'rejected', 'pending');
--> statement-breakpoint


CREATE TABLE "users" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "users_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"discord_id" text NOT NULL,
	"is_active" boolean NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	CONSTRAINT "users_discord_id_key" UNIQUE("discord_id")
);
--> statement-breakpoint
ALTER TABLE "users" ENABLE ROW LEVEL SECURITY;
--> statement-breakpoint


CREATE TABLE "bases" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "bases_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"level" smallint NOT NULL,
	"layout_link" text NOT NULL,
	"base_link" text NOT NULL,
	CONSTRAINT "bases_level_key" UNIQUE("level")
);
--> statement-breakpoint
ALTER TABLE "bases" ENABLE ROW LEVEL SECURITY;
--> statement-breakpoint


CREATE TABLE "cwl_clans" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "cwl_clans_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"clan_tag" text NOT NULL,
	"clan_name" text NOT NULL,
	CONSTRAINT "cwl_clans_clan_tag_key" UNIQUE("clan_tag")
);
--> statement-breakpoint
ALTER TABLE "cwl_clans" ENABLE ROW LEVEL SECURITY;
--> statement-breakpoint


CREATE TABLE "clans" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "clans_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"clan_code" text NOT NULL,
	"clan_name" text NOT NULL,
	"clan_level" smallint NOT NULL,
	"clan_tag" text NOT NULL,
	"attacks_requirements" integer,
	"donations_requirements" integer,
	"clangames_requirements" integer,
	"clan_data" jsonb,
	"clan_current_user" jsonb
);
--> statement-breakpoint
ALTER TABLE "clans" ENABLE ROW LEVEL SECURITY
;--> statement-breakpoint


CREATE TABLE "cwl_applications" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "cwl_applications_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"discord_id" text NOT NULL,
	"discord_username" text NOT NULL,
	"account_name" text NOT NULL,
	"account_tag" text NOT NULL,
	"account_clan" text NOT NULL,
	"account_weight" integer NOT NULL,
	"assigned_clan" text NOT NULL,
	"month" text NOT NULL,
	"year" integer NOT NULL,
	"preference_num" smallint NOT NULL,
	"applied_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL
);
--> statement-breakpoint
ALTER TABLE "cwl_applications" ENABLE ROW LEVEL SECURITY;
--> statement-breakpoint


CREATE TABLE "role_permissions" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "role_permissions_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"role" "app_role" NOT NULL,
	"permission" "app_permission" NOT NULL,
	CONSTRAINT "role_permissions_role_permission_key" UNIQUE("role","permission")
);
--> statement-breakpoint
ALTER TABLE "role_permissions" ENABLE ROW LEVEL SECURITY;
--> statement-breakpoint


CREATE TABLE "user_roles" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "user_roles_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"user_id" bigint NOT NULL,
	"role" "app_role" NOT NULL,
	CONSTRAINT "user_roles_user_id_role_key" UNIQUE("user_id","role")
);
--> statement-breakpoint
ALTER TABLE "user_roles" ENABLE ROW LEVEL SECURITY;
--> statement-breakpoint


CREATE TABLE "coc_accounts" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "coc_accounts_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"discord_id" text NOT NULL,
	"account_tag" text NOT NULL,
	CONSTRAINT "coc_accounts_account_tag_key" UNIQUE("account_tag")
);
--> statement-breakpoint
ALTER TABLE "coc_accounts" ENABLE ROW LEVEL SECURITY;
--> statement-breakpoint


CREATE TABLE "join_applications" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "join_applications_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"account_tag" text NOT NULL,
	"player_data" jsonb NOT NULL,
	"discord_username" text NOT NULL,
	"discord_id" text NOT NULL,
	"status" "join_status" NOT NULL,
	"created_at" timestamp with time zone NOT NULL,
	CONSTRAINT "join_applications_account_tag_key" UNIQUE("account_tag")
);
--> statement-breakpoint
ALTER TABLE "join_applications" ENABLE ROW LEVEL SECURITY;
--> statement-breakpoint


CREATE TABLE "settings" (
	"key" text PRIMARY KEY NOT NULL,
	"value" text NOT NULL,
	"type" text NOT NULL
);
--> statement-breakpoint

-- Create the auth hook function
create or replace function public.custom_access_token_hook(event jsonb)
returns jsonb
language plpgsql
stable
as $$
  DECLARE
    claims jsonb;
    user_metadata jsonb;
    discord_user_provider_id text;
    internal_user_id_from_db bigint;
    user_app_roles_array jsonb;
  BEGIN
    claims := COALESCE(event->'claims', '{}'::jsonb);
    user_metadata := claims->'user_metadata';

    IF user_metadata IS NOT NULL THEN
      discord_user_provider_id := user_metadata->>'provider_id';

      IF discord_user_provider_id IS NULL THEN
        discord_user_provider_id := user_metadata->>'sub';
      END IF;
    ELSE
      discord_user_provider_id := NULL;
    END IF;

    IF discord_user_provider_id IS NOT NULL THEN
      BEGIN
        SELECT u.id INTO internal_user_id_from_db
        FROM public.users u
        WHERE u.discord_id = discord_user_provider_id;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          internal_user_id_from_db := NULL;
        WHEN TOO_MANY_ROWS THEN
          internal_user_id_from_db := NULL;
      END;

      IF internal_user_id_from_db IS NOT NULL THEN
        SELECT jsonb_agg(ur.role::text) INTO user_app_roles_array
        FROM public.user_roles ur
        WHERE ur.user_id = internal_user_id_from_db;

        IF user_app_roles_array IS NOT NULL AND jsonb_array_length(user_app_roles_array) > 0 THEN
          claims := jsonb_set(claims, '{user_roles}', user_app_roles_array);
        END IF;
      END IF;
    END IF;

    event := jsonb_set(event, '{claims}', claims);
    RETURN event;
  end;
$$;

grant usage on schema public to supabase_auth_admin;

grant execute
  on function public.custom_access_token_hook
  to supabase_auth_admin;

revoke execute
  on function public.custom_access_token_hook
  from authenticated, anon, public;

grant all
  on table public.user_roles
to supabase_auth_admin;

grant all
  on table public.users
to supabase_auth_admin;

create policy "Allow auth admin to read user roles" ON public.user_roles
as permissive for select
to supabase_auth_admin
using (true);

create policy "Allow auth admin to read users" ON public.users
as permissive for select
to supabase_auth_admin
using (true);


CREATE OR REPLACE FUNCTION has_any_role(roles text[])
RETURNS boolean
LANGUAGE sql
STABLE
SET search_path = ''
AS $$
  SELECT EXISTS (
    SELECT 1
    FROM jsonb_array_elements_text((auth.jwt() -> 'user_roles')::jsonb) AS role
    WHERE role = ANY (roles)
  );
$$;
--> statement-breakpoint

CREATE OR REPLACE FUNCTION public.current_discord_id()
RETURNS text
LANGUAGE sql
STABLE
SET search_path = ''
AS $$
  SELECT COALESCE(
    user_metadata ->> 'provider_id',
    user_metadata ->> 'sub'
  )
  FROM (
    SELECT (auth.jwt() -> 'user_metadata')::jsonb AS user_metadata
  ) AS t
$$;

--> statement-breakpoint

ALTER TABLE "settings" ENABLE ROW LEVEL SECURITY;
--> statement-breakpoint

ALTER TABLE "cwl_applications" ADD CONSTRAINT "cwl_applications_assigned_clan_fkey" FOREIGN KEY ("assigned_clan") REFERENCES "public"."cwl_clans"("clan_tag") ON DELETE cascade ON UPDATE no action;
--> statement-breakpoint

ALTER TABLE "user_roles" ADD CONSTRAINT "user_roles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;
--> statement-breakpoint

ALTER TABLE "coc_accounts" ADD CONSTRAINT "coc_accounts_discord_id_fkey" FOREIGN KEY ("discord_id") REFERENCES "public"."users"("discord_id") ON DELETE cascade ON UPDATE no action;
--> statement-breakpoint

ALTER TABLE "join_applications" ADD CONSTRAINT "join_applications_discord_id_fkey" FOREIGN KEY ("discord_id") REFERENCES "public"."users"("discord_id") ON DELETE cascade ON UPDATE no action;
--> statement-breakpoint

CREATE POLICY "Enable all for users based on discord_id" ON "users" AS PERMISSIVE FOR ALL TO "authenticated" USING (discord_id = current_discord_id()) WITH CHECK (discord_id = current_discord_id());
--> statement-breakpoint

CREATE POLICY "Enable all for admin or user_manager" ON "users" AS PERMISSIVE FOR ALL TO "authenticated";
--> statement-breakpoint

CREATE POLICY "Enable read access for all users" ON "users" AS PERMISSIVE FOR SELECT TO "authenticated";
--> statement-breakpoint


CREATE POLICY "Enable all for admin or base_manager" ON "bases" AS PERMISSIVE FOR ALL TO "authenticated" USING (has_any_role(ARRAY['admin'::text, 'base_manager'::text])) WITH CHECK (has_any_role(ARRAY['admin'::text, 'base_manager'::text]));
--> statement-breakpoint

CREATE POLICY "Enable read access for all users" ON "bases" AS PERMISSIVE FOR SELECT TO public;
--> statement-breakpoint

CREATE POLICY "Enable all for admin or clan_manager" ON "cwl_clans" AS PERMISSIVE FOR ALL TO "authenticated" USING (has_any_role(ARRAY['admin'::text, 'clan_manager'::text])) WITH CHECK (has_any_role(ARRAY['admin'::text, 'clan_manager'::text]));
--> statement-breakpoint

CREATE POLICY "Enable select for authenticated users" ON "cwl_clans" AS PERMISSIVE FOR SELECT TO "authenticated";
--> statement-breakpoint

CREATE POLICY "Enable all for admin or clan_manager" ON "clans" AS PERMISSIVE FOR ALL TO "authenticated" USING (has_any_role(ARRAY['admin'::text, 'clan_manager'::text])) WITH CHECK (has_any_role(ARRAY['admin'::text, 'clan_manager'::text]));
--> statement-breakpoint

CREATE POLICY "Enable read access for all users" ON "clans" AS PERMISSIVE FOR SELECT TO public;
--> statement-breakpoint

CREATE POLICY "Enable all for admin or cwl_manager" ON "cwl_applications" AS PERMISSIVE FOR ALL TO "authenticated" USING (has_any_role(ARRAY['admin'::text, 'cwl_manager'::text])) WITH CHECK (has_any_role(ARRAY['admin'::text, 'cwl_manager'::text]));
--> statement-breakpoint

CREATE POLICY "Enable all for users based on discord_id" ON "cwl_applications" AS PERMISSIVE FOR ALL TO "authenticated" USING (discord_id = current_discord_id()) WITH CHECK (discord_id = current_discord_id());
--> statement-breakpoint

CREATE POLICY "Enable read access for all users" ON "role_permissions" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);
--> statement-breakpoint

CREATE POLICY "Enable all for admin" ON "role_permissions" AS PERMISSIVE FOR ALL TO "authenticated";
--> statement-breakpoint


CREATE POLICY "Enable all for admin" ON "user_roles" AS PERMISSIVE FOR ALL TO "authenticated" USING (has_any_role(ARRAY['admin'::text])) WITH CHECK (has_any_role(ARRAY['admin'::text]));
--> statement-breakpoint

CREATE POLICY "Enable read access for all users" ON "user_roles" AS PERMISSIVE FOR SELECT TO public;
--> statement-breakpoint


CREATE POLICY "Enable all for users based on discord_id" ON "coc_accounts" AS PERMISSIVE FOR ALL TO "authenticated" USING (discord_id = current_discord_id()) WITH CHECK (discord_id = current_discord_id());
--> statement-breakpoint

CREATE POLICY "Enable read access for all users" ON "coc_accounts" AS PERMISSIVE FOR SELECT TO "authenticated";
--> statement-breakpoint

CREATE POLICY "Enable all for admin or coc_account_manager or user_manager" ON "coc_accounts" AS PERMISSIVE FOR ALL TO "authenticated";
--> statement-breakpoint

CREATE POLICY "Enable all for users based on discord_id" ON "join_applications" AS PERMISSIVE FOR ALL TO "authenticated" USING (discord_id = current_discord_id()) WITH CHECK (discord_id = current_discord_id());
--> statement-breakpoint

CREATE POLICY "Enable all for admin or join_manager" ON "join_applications" AS PERMISSIVE FOR ALL TO "authenticated";
--> statement-breakpoint

CREATE POLICY "Enable all for admin or setting_manager" ON "settings" AS PERMISSIVE FOR ALL TO "authenticated" USING (has_any_role(ARRAY['admin'::text, 'setting_manager'::text])) WITH CHECK (has_any_role(ARRAY['admin'::text, 'setting_manager'::text]));
--> statement-breakpoint

CREATE POLICY "Enable read access for all users" ON "settings" AS PERMISSIVE FOR SELECT TO public;
--> statement-breakpoint
